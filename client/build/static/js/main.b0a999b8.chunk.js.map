{"version":3,"sources":["logo.svg","components/ResumeItem/ResumeItem.jsx","components/Resume/Resume.jsx","components/Sketch/Sketch.jsx","components/Home/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ResumeItem","props","useState","resumeData","text","image","title","hover","setHover","className","onMouseEnter","onMouseLeave","Resume","items","map","i","sketch","p","setup","createCanvas","window","innerWidth","textAlign","CENTER","textSize","draw","background","windowResized","resizeCanvas","Sketch","React","createRef","myRef","useEffect","canvas","p5","current","remove","ref","Home","App","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,uLCG5B,SAASC,EAAWC,GAAQ,IAAD,EACdC,mBAASD,EAAME,WAAWC,MADZ,mBAC/BA,EAD+B,aAEZF,mBAASD,EAAME,WAAWE,QAFd,mBAE/BA,EAF+B,aAGZH,mBAASD,EAAME,WAAWG,QAHd,mBAG/BA,EAH+B,aAIZJ,oBAAS,IAJG,mBAI/BK,EAJ+B,KAIxBC,EAJwB,KAatC,OACI,yBAAKC,UAAS,eAAUF,EAAQ,aAAc,IAAMG,aAR/B,WACrBF,GAAS,IAO2EG,aAJ/D,WACrBH,GAAS,MAIHD,GAAS,8BAAM,4BAAKH,GACtB,2BAAIE,IACHC,GAAS,2BAAIF,I,MCjBX,SAASO,IACpB,IAD6B,EAiCHV,mBAhCR,CAClB,CACIE,KAAM,gBACNC,MAAO,UACPC,MAAO,WAEX,CACIF,KAAM,gBACNC,MAAO,UACPC,MAAO,WAEX,CACIF,KAAM,gBACNC,MAAO,UACPC,MAAO,WAEX,CACIF,KAAM,gBACNC,MAAO,UACPC,MAAO,WAEX,CACIF,KAAM,gBACNC,MAAO,UACPC,MAAO,WAEX,CACIF,KAAM,gBACNC,MAAO,UACPC,MAAO,aA9BkB,mBAiCtBO,EAjCsB,UAkC7B,OACI,yBAAKJ,UAAU,kBACdI,EAAMC,KAAI,SAACC,GACR,OAAO,kBAAC,EAAD,CAAYZ,WAAYY,Q,qBCtCrCC,EAAS,SAACC,GACZA,EAAEC,MAAQ,WACND,EAAEE,aAAaC,OAAOC,WAAY,KAClCJ,EAAEK,UAAUL,EAAEM,OAAQN,EAAEM,QACxBN,EAAEO,SAAS,KAGfP,EAAEQ,KAAO,WACLR,EAAES,WAAW,KACbT,EAAEb,KAAK,eAAgBgB,OAAOC,WAAa,EAAG,MAIlDJ,EAAEU,cAAgB,WACdV,EAAEW,aAAaR,OAAOC,WAAY,OAI3B,SAASQ,IAAU,IAAD,EACH3B,mBAAS4B,IAAMC,aADZ,mBACtBC,EADsB,UAS7B,OANAC,qBAAU,WACN,IAAIC,EAAS,IAAIC,IAAGnB,EAAQgB,EAAMI,SAClC,OAAO,WACHF,EAAOG,aAIX,yBAAKC,IAAKN,IC3BH,SAASO,IAAQ,IAAD,EACDrC,mBAAS,GADR,6BAE3B,OACI,6BACI,kBAAC2B,EAAD,MACA,kBAAC,EAAD,O,MCkBGW,MAff,WACE,OACE,kBAAC,IAAD,KACA,yBAAK/B,UAAU,OACf,kBAAC,IAAD,CAAOgC,OAAK,EAACC,KAAK,KACd,kBAACH,EAAD,OAEF,kBAAC,IAAD,CAAOG,KAAK,SACV,kBAACH,EAAD,UCPYI,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b0a999b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState} from \"react\";\nimport \"./ResumeItem.css\"\n\nexport default function ResumeItem(props) {\n    const [text, setText] = useState(props.resumeData.text);\n    const [image, setImage] = useState(props.resumeData.image);\n    const [title, setTitle] = useState(props.resumeData.title);\n    const [hover, setHover] = useState(false);\n\n    const handleMouseEnter = () => {\n        setHover(true);\n    }\n\n    const handleMouseLeave = () => {\n        setHover(false);\n    }\n    return (\n        <div className={`card ${hover ? \"card-hover\": \"\"}`} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\n            {!hover && <span><h3>{text}</h3>\n            <p>{title}</p></span>}\n            {hover && <p>{image}</p>}\n        </div>\n    )\n}","import React, {useState} from \"react\";\nimport ResumeItem from \"../ResumeItem/ResumeItem\"\nimport \"./Resume.css\"\nexport default function Resume() {\n    const items_arr = [\n    {\n        text: \"Resume item 1\",\n        image: \"Image 1\",\n        title: \"Title 1\"\n    },\n    {\n        text: \"Resume item 2\",\n        image: \"Image 2\",\n        title: \"Title 2\"\n    },\n    {\n        text: \"Resume item 3\",\n        image: \"Image 3\",\n        title: \"Title 3\"\n    },\n    {\n        text: \"Resume item 4\",\n        image: \"Image 4\",\n        title: \"Title 4\"\n    },\n    {\n        text: \"Resume item 5\",\n        image: \"Image 5\",\n        title: \"Title 5\"\n    },\n    {\n        text: \"Resume item 6\",\n        image: \"Image 6\",\n        title: \"Title 6\"\n    }\n]\n    const [items, setItems] = useState(items_arr);\n    return (\n        <div className=\"card-container\">\n        {items.map((i) => {\n            return <ResumeItem resumeData={i} />\n        })\n        }\n        </div>\n    )\n}","import React, {useEffect, useState} from \"react\";\nimport p5 from \"p5\";\nconst sketch = (p) =>  {\n    p.setup = () => {\n        p.createCanvas(window.innerWidth, 600)\n        p.textAlign(p.CENTER, p.CENTER)\n        p.textSize(42)\n    }\n\n    p.draw = () => {\n        p.background(255)\n        p.text(\"Samyak Kumar\", window.innerWidth / 2, 300)\n\n    }\n\n    p.windowResized = () => {\n        p.resizeCanvas(window.innerWidth, 600)\n    }\n}\n\nexport default function Sketch() {\n    const [myRef, setMyRef] = useState(React.createRef())\n    // setmyP5(new p5(sketch, myRef.current))\n    useEffect(()=>{\n        let canvas = new p5(sketch, myRef.current)\n        return () => {\n            canvas.remove()\n        }\n    })\n    return (\n        <div ref={myRef}>\n\n        </div>\n    )\n}\n","import React, { useState } from \"react\";\nimport Resume from \"../Resume/Resume\";\nimport Sketch from \"../Sketch/Sketch\";\nexport default function Home() {\n    const [count, setCount] = useState(0);\n    return(\n        <div>\n            <Sketch />\n            <Resume />\n            \n        </div>\n    )\n}","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\nimport logo from './logo.svg';\nimport Home from \"./components/Home/Home\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n    <Route exact path=\"/\">\n        <Home />\n      </Route>\n      <Route path=\"/home\">\n        <Home />\n      </Route>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}